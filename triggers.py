# triggers.py
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from config import DB_PATH, ALLOWED_CHAT_ID, OWNERS, ADMINS
from database import Database
import logging

router = Router()
db = Database(DB_PATH)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
async def is_admin(bot, chat_id, user_id):
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ is_admin: user_id={user_id}, chat_id={chat_id}")
    if user_id in OWNERS:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ OWNERS")
        return True
    if user_id in ADMINS:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ ADMINS")
        return True
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        is_admin = member.is_chat_admin()
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API: user_id={user_id}, is_admin={is_admin}")
        return is_admin
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è user_id={user_id}: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
def is_allowed_chat(chat_id):
    return str(chat_id) == ALLOWED_CHAT_ID

@router.message(Command("addt"))
async def add_trigger(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Ç—Ä–∏–≥–≥–µ—Ä–∞!", parse_mode="HTML")
        return
    try:
        trigger_word = message.text.split()[1]
        response = message.reply_to_message.text
        db.add_trigger(message.chat.id, trigger_word, response)
        await message.answer(f"üõ†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä '{trigger_word}' –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="HTML")
        logging.info(f"üõ†Ô∏è **–¢—Ä–∏–≥–≥–µ—Ä {trigger_word} –¥–æ–±–∞–≤–ª–µ–Ω** –≤ —á–∞—Ç–µ {message.chat.id}")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞!", parse_mode="HTML")

@router.message(Command("delt"))
async def delete_trigger(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    try:
        trigger_word = message.text.split()[1]
        db.delete_trigger(message.chat.id, trigger_word)
        await message.answer(f"üóëÔ∏è –¢—Ä–∏–≥–≥–µ—Ä '{trigger_word}' —É–¥–∞–ª–µ–Ω!", parse_mode="HTML")
        logging.info(f"üóëÔ∏è **–¢—Ä–∏–≥–≥–µ—Ä {trigger_word} —É–¥–∞–ª–µ–Ω** –≤ —á–∞—Ç–µ {message.chat.id}")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞!", parse_mode="HTML")

@router.message(Command("triggers"))
async def list_triggers(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    triggers = db.get_triggers(message.chat.id)
    if not triggers:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø—É—Å—Ç!", parse_mode="HTML")
        return
    text = "üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\n"
    for trigger_word, _ in triggers:
        text += f"‚ñ´Ô∏è {trigger_word}\n"
    await message.answer(text, parse_mode="HTML")
    logging.info(f"üìã **–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤** –≤ —á–∞—Ç–µ {message.chat.id}")

@router.message()
async def check_trigger(message: Message):
    if not is_allowed_chat(message.chat.id):
        return
    triggers = db.get_triggers(message.chat.id)
    for trigger_word, response in triggers:
        if trigger_word.lower() in message.text.lower():
            full_name = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a>"
            response = response.replace("{full_name}", full_name)
            await message.answer(f"{response}", parse_mode="HTML")
            db.increment_trigger_stat(trigger_word)
            logging.info(f"üöÄ **–¢—Ä–∏–≥–≥–µ—Ä {trigger_word} —Å—Ä–∞–±–æ—Ç–∞–ª** –≤ —á–∞—Ç–µ {message.chat.id}")
            break