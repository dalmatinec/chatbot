# admin.py
from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberUpdated
from aiogram.filters import Command, ChatMemberUpdatedFilter, KICKED, RESTRICTED, LEFT, MEMBER
from aiogram.enums import ChatType
from config import DB_PATH, ALLOWED_CHAT_ID, BOT_TOKEN, OWNERS, ADMINS
from database import Database
import logging

router = Router()
db = Database(DB_PATH)
bot = Bot(token=BOT_TOKEN)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
async def is_admin(bot, chat_id, user_id):
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ is_admin: user_id={user_id}, chat_id={chat_id}")
    if user_id in OWNERS:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ OWNERS")
        return True
    if user_id in ADMINS:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ ADMINS")
        return True
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        is_admin = member.is_chat_admin()
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API: user_id={user_id}, is_admin={is_admin}")
        return is_admin
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è user_id={user_id}: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
def is_allowed_chat(chat_id):
    return str(chat_id) == ALLOWED_CHAT_ID

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("getid"))
async def get_id(message: Message):
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", parse_mode="HTML")
        return
    user_id = message.reply_to_message.from_user.id
    username = message.reply_to_message.from_user.username or "–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
    await message.answer(f"ü¶Å ID: {user_id} | –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}", parse_mode="HTML")
    logging.info(f"ü¶Å **–ö–æ–º–∞–Ω–¥–∞ /getid** –¥–ª—è user_id={user_id}, username={username}")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
@router.message(Command("open"))
async def open_forward(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    user_id = None
    full_name = None
    username = None
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        full_name = f"<a href='tg://user?id={user_id}'>{message.reply_to_message.from_user.full_name}</a>"
        username = message.reply_to_message.from_user.username or f"ID {user_id}"
        db.add_user(user_id, f"@{username}")
    else:
        try:
            target = message.text.split(maxsplit=1)[1].strip()
            if target.startswith("@"):
                username = target[1:]
                user_id = db.get_user_id_by_username(username)
                if user_id:
                    try:
                        user = await bot.get_chat_member(message.chat.id, user_id)
                        full_name = f"<a href='tg://user?id={user_id}'>{user.user.full_name}</a>"
                        db.add_user(user_id, f"@{user.user.username or f'ID {user_id}'}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} —á–µ—Ä–µ–∑ API: {e}", exc_info=True)
                        full_name = target
                else:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ API Telegram
                    try:
                        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username —á–µ—Ä–µ–∑ —á–∞—Ç
                        members = await bot.get_chat_administrators(message.chat.id)
                        for member in members:
                            if member.user.username and member.user.username.lower() == username.lower():
                                user_id = member.user.id
                                full_name = f"<a href='tg://user?id={user_id}'>{member.user.full_name}</a>"
                                db.add_user(user_id, f"@{member.user.username}")
                                break
                        if not user_id:
                            # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ get_chat_member
                            chat_member = await bot.get_chat_member(message.chat.id, f"@{username}")
                            user_id = chat_member.user.id
                            full_name = f"<a href='tg://user?id={user_id}'>{chat_member.user.full_name}</a>"
                            db.add_user(user_id, f"@{chat_member.user.username or f'ID {user_id}'}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target}: {e}", exc_info=True)
                        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML")
                        return
            else:
                user_id = int(target)
                try:
                    user = await bot.get_chat_member(message.chat.id, user_id)
                    full_name = f"<a href='tg://user?id={user_id}'>{user.user.full_name}</a>"
                    username = user.user.username or f"ID {user_id}"
                    db.add_user(user_id, f"@{username}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}", exc_info=True)
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML")
                    return
        except (IndexError, ValueError):
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º!", parse_mode="HTML")
            return
    try:
        db.add_forward_permission(message.chat.id, user_id)
        await message.answer(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å {full_name} –≤ —Å–ø–∏—Å–∫–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö\n"
            f"üì¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± —Å–ø–∞–º–µ—Ä–æ–≤!",
            parse_mode="HTML"
        )
        logging.info(f"üîì **–ü—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (username={username}) –≤ —á–∞—Ç–µ {message.chat.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞! –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")

@router.message(Command("close"))
async def close_forward(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    user_id = None
    full_name = None
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        full_name = f"<a href='tg://user?id={user_id}'>{message.reply_to_message.from_user.full_name}</a>"
    else:
        try:
            target = message.text.split(maxsplit=1)[1].strip()
            if target.startswith("@"):
                user_id = db.get_user_id_by_username(target[1:])
                if user_id:
                    try:
                        user = await bot.get_chat_member(message.chat.id, user_id)
                        full_name = f"<a href='tg://user?id={user_id}'>{user.user.full_name}</a>"
                    except:
                        full_name = target
                else:
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML")
                    return
            else:
                user_id = int(target)
                try:
                    user = await bot.get_chat_member(message.chat.id, user_id)
                    full_name = f"<a href='tg://user?id={user_id}'>{user.user.full_name}</a>"
                except:
                    full_name = f"ID {user_id}"
        except (IndexError, ValueError):
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º!", parse_mode="HTML")
            return
    db.remove_forward_permission(message.chat.id, user_id)
    await message.answer(
        f"üö´ –ü—Ä–∞–≤–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–æ–∑–≤–∞–Ω—ã —É {full_name}!\n"
        f"üì© –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∞–º.",
        parse_mode="HTML"
    )
    logging.info(f"üîí **–ü—Ä–∞–≤–∞ –∑–∞–±—Ä–∞–Ω—ã** —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {message.chat.id}")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–∞–Ω–∞
@router.message(Command("ban"))
async def ban_user(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    user_id = None
    full_name = None
    username = None
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        full_name = f"<a href='tg://user?id={user_id}'>{message.reply_to_message.from_user.full_name}</a>"
        username = message.reply_to_message.from_user.username or f"ID {user_id}"
        db.add_user(user_id, f"@{username}")
    else:
        try:
            target = message.text.split(maxsplit=1)[1].strip()
            if target.startswith("@"):
                user_id = db.get_user_id_by_username(target[1:])
                if user_id:
                    try:
                        user = await bot.get_chat_member(message.chat.id, user_id)
                        full_name = f"<a href='tg://user?id={user_id}'>{user.user.full_name}</a>"
                        username = user.user.username or f"ID {user_id}"
                        db.add_user(user_id, f"@{username}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target}: {e}", exc_info=True)
                        full_name = target
                        username = target[1:]
                else:
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML")
                    logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                    return
            else:
                user_id = int(target)
                try:
                    user = await bot.get_chat_member(message.chat.id, user_id)
                    full_name = f"<a href='tg://user?id={user_id}'>{user.user.full_name}</a>"
                    username = user.user.username or f"ID {user_id}"
                    db.add_user(user_id, f"@{username}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}", exc_info=True)
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML")
                    return
        except (IndexError, ValueError):
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º!", parse_mode="HTML")
            return
    try:
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=user_id)
        db.add_ban(message.chat.id, user_id)
        await message.answer(
            f"üö∑ –ë–ê–ù—Ö–∞–º–º–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {full_name}!\n"
            f"üîï –ü–æ–∫–æ–π –∏ —Ç–∏—à–∏–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
            parse_mode="HTML"
        )
        logging.info(f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (username={username}) –∑–∞–±–∞–Ω–µ–Ω** –≤ —á–∞—Ç–µ {message.chat.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")

@router.message(Command("unban"))
async def unban_user(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    user_id = None
    full_name = None
    username = None
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        full_name = f"<a href='tg://user?id={user_id}'>{message.reply_to_message.from_user.full_name}</a>"
        username = message.reply_to_message.from_user.username or f"ID {user_id}"
        db.add_user(user_id, f"@{username}")
    else:
        try:
            target = message.text.split(maxsplit=1)[1].strip()
            if target.startswith("@"):
                user_id = db.get_user_id_by_username(target[1:])
                if user_id:
                    try:
                        user = await bot.get_chat_member(message.chat.id, user_id)
                        full_name = f"<a href='tg://user?id={user_id}'>{user.user.full_name}</a>"
                        username = user.user.username or f"ID {user_id}"
                        db.add_user(user_id, f"@{username}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target}: {e}", exc_info=True)
                        full_name = target
                        username = target[1:]
                else:
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML")
                    logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                    return
            else:
                user_id = int(target)
                try:
                    user = await bot.get_chat_member(message.chat.id, user_id)
                    full_name = f"<a href='tg://user?id={user_id}'>{user.user.full_name}</a>"
                    username = user.user.username or f"ID {user_id}"
                    db.add_user(user_id, f"@{username}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}", exc_info=True)
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target} –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML")
                    return
        except (IndexError, ValueError):
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º!", parse_mode="HTML")
            return
    try:
        await bot.unban_chat_member(chat_id=message.chat.id, user_id=user_id)
        db.remove_ban(message.chat.id, user_id)
        await message.answer(
            f"üßô‚Äç‚ôÇÔ∏è –°–Ω—è—Ç–æ –∑–∞–∫–ª—è—Ç–∏–µ –±–∞–Ω–∞ –¥–ª—è {full_name}.\n"
            f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç!",
            parse_mode="HTML"
        )
        logging.info(f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (username={username}) —Ä–∞–∑–±–∞–Ω–µ–Ω** –≤ —á–∞—Ç–µ {message.chat.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ –±–µ–∑ –ø—Ä–∞–≤
@router.message(F.forward_date)
async def check_forward(message: Message):
    if not is_allowed_chat(message.chat.id):
        return
    if not db.check_forward_permission(message.chat.id, message.from_user.id):
        user_id = message.from_user.id
        full_name = f"<a href='tg://user?id={user_id}'>{message.from_user.full_name}</a>"
        await message.delete()
        await message.answer(
            f"{full_name}\n"
            f"üòÖ –£–ø—Å! –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n"
            f"‚úâÔ∏è –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∞–º ‚Äî –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç! /adm",
            parse_mode="HTML"
        )
        logging.info(f"üóëÔ∏è **–§–æ—Ä–≤–∞—Ä–¥ —É–¥–∞–ª–µ–Ω** –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–Ω–∞—Ö
@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=(KICKED | RESTRICTED | LEFT | MEMBER)))
async def delete_ban_message(event: ChatMemberUpdated):
    if event.new_chat_member.status in ["kicked"]:
        try:
            await bot.delete_message(chat_id=event.chat.id, message_id=event.message_id)
            logging.info(f"üóëÔ∏è **–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ —É–¥–∞–ª–µ–Ω–æ** –≤ —á–∞—Ç–µ {event.chat.id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}", exc_info=True)
    elif event.new_chat_member.status == "member" and event.old_chat_member.status in ["kicked"]:
        try:
            await bot.delete_message(chat_id=event.chat.id, message_id=event.message_id)
            logging.info(f"üóëÔ∏è **–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–±–∞–Ω–µ —É–¥–∞–ª–µ–Ω–æ** –≤ —á–∞—Ç–µ {event.chat.id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑–±–∞–Ω–µ: {e}", exc_info=True)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–æ–ø-–º–∞–≥–∞–∑–∏–Ω–æ–≤
@router.message(Command("addtop"))
async def add_top_shop(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    if message.reply_to_message:
        username = message.reply_to_message.from_user.username
        if not username:
            await message.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username!", parse_mode="HTML")
            return
        db.add_top_shop(message.chat.id, f"@{username}", "")
        await message.answer(f"üèÜ –ú–∞–≥–∞–∑–∏–Ω @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–æ–ø!", parse_mode="HTML")
        logging.info(f"üèÜ **–ú–∞–≥–∞–∑–∏–Ω @{username} –¥–æ–±–∞–≤–ª–µ–Ω** –≤ —Ç–æ–ø –≤ —á–∞—Ç–µ {message.chat.id}")
    else:
        try:
            username = message.text.split(maxsplit=1)[1].strip()
            db.add_top_shop(message.chat.id, username, "")
            await message.answer(f"üèÜ –ú–∞–≥–∞–∑–∏–Ω {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–æ–ø!", parse_mode="HTML")
            logging.info(f"üèÜ **–ú–∞–≥–∞–∑–∏–Ω {username} –¥–æ–±–∞–≤–ª–µ–Ω** –≤ —Ç–æ–ø –≤ —á–∞—Ç–µ {message.chat.id}")
        except IndexError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username –º–∞–≥–∞–∑–∏–Ω–∞!", parse_mode="HTML")

@router.message(Command("deltop"))
async def delete_top_shop(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    try:
        username = message.text.split(maxsplit=1)[1].strip()
        db.delete_top_shop(message.chat.id, username)
        await message.answer(f"üóëÔ∏è –ú–∞–≥–∞–∑–∏–Ω {username} —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–æ–ø–∞!", parse_mode="HTML")
        logging.info(f"üóëÔ∏è **–ú–∞–≥–∞–∑–∏–Ω {username} —É–¥–∞–ª–µ–Ω** –∏–∑ —Ç–æ–ø–∞ –≤ —á–∞—Ç–µ {message.chat.id}")
    except IndexError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username –º–∞–≥–∞–∑–∏–Ω–∞!", parse_mode="HTML")

@router.message(Command("des"))
async def set_description(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    if not await is_admin(message.bot, message.chat.id, message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        return
    if message.reply_to_message:
        description = message.reply_to_message.text
        try:
            username = message.text.split(maxsplit=1)[1].strip()
            db.add_top_shop(message.chat.id, username, description)
            await message.answer(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {username} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode="HTML")
            logging.info(f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ** –¥–ª—è {username} –≤ —á–∞—Ç–µ {message.chat.id}")
        except IndexError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username –º–∞–≥–∞–∑–∏–Ω–∞!", parse_mode="HTML")
    else:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º!", parse_mode="HTML")

@router.message(Command("top"))
async def show_top_shops(message: Message):
    if not is_allowed_chat(message.chat.id):
        await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ!", parse_mode="HTML")
        return
    shops = db.get_top_shops(message.chat.id)
    if not shops:
        await message.answer("üèÜ –°–ø–∏—Å–æ–∫ —Ç–æ–ø-–º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—É—Å—Ç!", parse_mode="HTML")
        return
    text = "üèÜ –¢–æ–ø –º–∞–≥–∞–∑–∏–Ω—ã:\n"
    for i, (username, description) in enumerate(shops):
        text += f"‚ñ´Ô∏è {username}\nüóÇ {description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        if i < len(shops) - 1:  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
            text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    await message.answer(text, parse_mode="HTML")
    logging.info(f"üèÜ **–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-–º–∞–≥–∞–∑–∏–Ω–æ–≤** –≤ —á–∞—Ç–µ {message.chat.id}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (–∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –õ–°)
@router.message(Command("stat"), F.chat.type.in_({ChatType.PRIVATE}))
async def show_trigger_stats(message: Message):
    user_id = message.from_user.id
    if user_id not in OWNERS and user_id not in ADMINS:
        await message.answer("üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode="HTML")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /stat –±–µ–∑ –ø—Ä–∞–≤")
        return
    stats = db.get_trigger_stats()
    if not stats:
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞!", parse_mode="HTML")
        return
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\n"
    for trigger_word, count in stats:
        text += f"‚ñ´Ô∏è {trigger_word}: {count} –≤—ã–∑–æ–≤(–æ–≤)\n"
    await message.answer(text, parse_mode="HTML")
    logging.info(f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")